## rdcb module variables

"region" = "us-east-1"

## rdcb module variables

"AmiId" = "ami-0748b8574d41a3ebb"
"AmiDistro" = "CentOS"
"AppScriptParams" = ""
"AppScriptShell" = "bash"
"AppScriptUrl" = "https://s3-external-1.amazonaws.com/your_bucketname/servicenow/scripts/make-servicenow-NORDS.sh""
"AppVolumeDevice" = "/dev/xvdf"
"AppVolumeMountPath" = "/glide"
"AppVolumeSize" = "50"
"AppVolumeType" = "gp2"
"CfnBootstrapUtilsUrl" = "https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz"
"CfnEndpointUrl" = "https://cloudformation.us-east-1.amazonaws.com"
"CfnGetPipUrl" = "https://bootstrap.pypa.io/get-pip.py"
"DesiredCapacity" = "1"
"InstanceRole" = "INSTANCE_SERVICENOW"
"InstanceType" = "t2.micro"
"KeyPairName" = "yourkeypair"
"MaxCapacity" = "1"
"MinCapacity" = "1"
"NoPublicIp" = "true"
"NoReboot" = "false"
"NoUpdates" = "false"
"PypiIndexUrl" = ""
"RdsEndpointAddress" = "yourRDS.c0dsxuyyl279.us-east-1.rds.amazonaws.com"
"RdsDbUsername" = "rdsdbadmin"
"RdsDbPassword" = "yourpassword" 
"ScaleDownSchedule" = ""
"ScaleUpSchedule" = ""
"SecurityGroupIds" = "sg-xxxxxxxx,sg-yyyyyyyy"
"ServiceNowInstallScript" = "https://s3.amazonaws.com/yourbucket/servicenow/scripts/install-servicenow_test.sh"
"ServiceNowInstallTimeout" = "8"
"ServiceNowJarZipUri" = "https://s3.amazonaws.com/yourbucket/servicenow/media/glide-jakarta.zip"
"SubnetIds" = "subnet-xxxxxxxx"
"stackname" = "snow-autoscaling"
"SnowAsgTemplateUrl" = "https://s3.amazonaws.com/bucket/template.cfn.json"
"terra-profile" = "default"
"ToggleCfnInitUpdate" = ""
"ToggleNewInstances" = ""
"WatchmakerAdminGroups" = ""
"WatchmakerAdminUsers" = ""
"WatchmakerConfig" = ""
"WatchmakerEnvironment" = ""
"WatchmakerOuPath" = ""
"local-exec-profile" = "snow-pilot"
"role_arn" = "arn:aws:iam::123456789:role/yourrole"
"role_session_name" = "terraform"
## Load Balancer Vars
"VpcId" = "vpc-xxxxxxxx"
"dns_name" = "test"
"lb_internal" = "false"
"lb_subnets" = ["subnet-xxxxxxxx", "subnet-yyyyyyyy", "subnet-zzzzzzzz"]
"public_dnszone_id" = "yourzoneid"
"deregistration_delay" = "300"
"stickiness" = "true"
"cookie_duration" = "86400"
"interval" = "30"
"timeout" = "5"
"healthy_threshold" = "5"
"unhealthy_threshold" = "2"
## certificate toggle
## setting create_certificate to false will trigger use of an existing certificate and on-premise dns
## setting create_certificate to true will request a new certificate and handle r53
"create_certificate" = "true"
"optional_existing_cert_arn" = "arn:aws:acm:us-east-1:123123123:certificate/xxxxx"
## on premise dns
"DnsServer" = "1.2.3.4"
"DnsZone" = "myzone.com."
"DnsRecordName" = "myname"
"Ttl" = "300"
